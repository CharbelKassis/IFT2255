package guichet.physique;import compte.Argent;import simulation.Simulation;/** Gestionnaire du distributeur d'argent. Dans un vrai guichet, ceci gere un composant physique;  * dans cette simulation, ca utilise les classes dans le package simulation. */ public class DistributeurArgent{    /** Constructor     *     *  @param log le journal dans lequel on enregistre la distribution d'argent     */    public DistributeurArgent(Journal log)    {        this.log = log;                cashOnHand = new Argent(0);    }        /** Initialise le montant d'argent dans le distributeur     *     *  @param initialCash le montant d'argent dans le distributeur     */    public void setInitialCash(Argent initialCash)    {        cashOnHand = initialCash;    }        /** Verifie s'il y a assez d'argent pour satisfaire une requete     *     *  @param amount Le montant d;argent desire par le client     *  @return true si au moins ce montant est disponible     */    public boolean checkCashOnHand(Argent amount)    {   	    	if(!amount.lessEqual(cashOnHand))    		    		return false;    	    	else {    		    		Argent dollar20  = new Argent(20);        	Argent dollar5  = new Argent(5);        	Argent dollar0 = new Argent(0);        	Argent tempAmount = new Argent(amount);         	int nbOf20 = Simulation.getInstance().getNbOf20();        	int nbOf5 = Simulation.getInstance().getNbOf5();        	        	        	while(nbOf20 > 0) {        		        		if(dollar20.lessEqual(tempAmount)) {        			        			tempAmount.subtract(dollar20);        			nbOf20--;        		}        		        		break;        	}        	        	while(nbOf5 > 0) {        		        		if(dollar5.lessEqual(tempAmount)) {        			        			tempAmount.subtract(dollar5);        			nbOf5--;        		}        		        		break;        	}        	        	if(tempAmount.lessEqual(dollar0)) {        		        		nbOf20Used = Simulation.getInstance().getNbOf20() - nbOf20;        		nbOf5Used = Simulation.getInstance().getNbOf5() - nbOf5;        		return true;        	}        	        	return false;    		    	}	    }        /** Distribue l'argent au client     *     *  @param amount le montant d'argent a distribuer     *     *  Precondition: amount est <= argent disponible     */    public void dispenseCash(Argent amount)    {            	Simulation.getInstance().setNbOf20(Simulation.getInstance().getNbOf20()-nbOf20Used);    	Simulation.getInstance().setNbOf5(Simulation.getInstance().getNbOf5()-nbOf5Used);    	    	    	cashOnHand.subtract(amount);                Simulation.getInstance().dispenseCash(amount);                log.logCashDispensed(amount);    }    /** Log Le journal ou on enregistre la distribution d'argent     */     private Journal log;        /** Argent disponible     */    private Argent cashOnHand;        /**     * le nombre de 20$ retires durant la derniere transaction     */    private int nbOf20Used;        /**     * le nombre de 5$ retires durant la derniere transaction     */    private int nbOf5Used;    }